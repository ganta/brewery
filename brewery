#!/usr/bin/ruby

require 'optparse'

class BrewCommand
  attr_reader :name

  def initialize(name, args = [])
    @name = name
    @args = args
  end

  def exec
    command_line = "brew #{@name} #{@args.join(' ')}"
    puts command_line
    unless system command_line
      exit 1
    end
  end
end

BEFORE_COMMANDS = [BrewCommand.new('update'), BrewCommand.new('upgrade')].freeze
AFTER_COMMANDS = [BrewCommand.new('cleanup')].freeze
ignore_commands = []

@options = ARGV.getopts('', 'file:Brewfile', '[no-]update', '[no-]upgrade', '[no-]cleanup')
(BEFORE_COMMANDS + AFTER_COMMANDS).each do |command|
  # The commands that are ignored in Brewfile when explicitly specified.
  ignore_commands << command unless @options[command.name].nil?
end

exit 1 unless system 'ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"' unless system 'type brew'
exit 1 unless system 'xcode-select --install' unless Dir.exist?('/usr/include')

brewfile = @options['file']

def exec_commands(commands)
  commands.each do |command|
    command.exec if @options[command.name]
  end
end

exec_commands BEFORE_COMMANDS

File.open(brewfile) do |file|
  file.each_line do |line|
    line.strip!
    line.gsub!(/\s*#.*/, '')
    next if line.empty?
    name, *args = line.split(/\s/)
    command = BrewCommand.new(name, args)
    next if ignore_commands.any? { |ignore_command| command.name == ignore_command.name }
    command.exec
  end
end

exec_commands AFTER_COMMANDS
